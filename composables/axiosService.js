// /composables/axiosService.js
import axios from 'axios'

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å useRuntimeConfig ‡∏ï‡∏≠‡∏ô import ‡πÇ‡∏°‡∏î‡∏π‡∏•
let _axiosConfigured = false
const ensureAxiosConfigured = () => {
  if (_axiosConfigured) return
  const config = useRuntimeConfig()
  axios.defaults.baseURL = config.public.api_url
  _axiosConfigured = true
}

// --- refresh guard ‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ---
let _refreshingPromise = null
const refreshTokenOnce = async () => {
  if (_refreshingPromise) return _refreshingPromise

  _refreshingPromise = (async () => {
    try {
      const user_id = (await useDecryptedCookie('user_id')) || ''
      const refresh_token = (await useDecryptedCookie('refresh_token')) || ''

      if (!user_id || !refresh_token) throw new Error('NO_REFRESH_CREDS')

      // ‡∏¢‡∏¥‡∏á refresh ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ request() ‡∏Å‡∏±‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏õ)
      const resp = await axios.post('/api/auth/refresh', {
        user_id,
        refresh_token,
      })

      const data = resp?.data || {}

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cookie ‡∏ï‡∏≤‡∏° respond
      if (data?.access_token) {
        await useEncryptedCookie('token', data.access_token)
      }
      if (data?.refresh_token) {
        await useEncryptedCookie('refresh_token', data.refresh_token)
      }
      if (data?.user_id) {
        await useEncryptedCookie('user_id', data.user_id)
      }

      return data
    } finally {
      // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      _refreshingPromise = null
    }
  })()

  return _refreshingPromise
}

// ========== ‡∏Ñ‡∏á logic ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ==========
export const getToken = async () => {
  return (await useDecryptedCookie('token')) || ''
}

export async function request(method, url, data, auth = true) {
  ensureAxiosConfigured()

  const headers = {}
  const isloadingAxi = useState('isloadingAxi', () => true)
  isloadingAxi.value = true

  try {
    if (auth) {
      const token = await getToken()
      headers['Authorization'] = `Bearer ${token}`
    }

    const response = await axios({ method, url, data, headers })
    isloadingAxi.value = false
    return response
  } catch (error) {
    // ---------- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ----------
    // ‡∏ñ‡πâ‡∏≤ 401: ‡∏•‡∏≠‡∏á refresh ‡πÅ‡∏•‡πâ‡∏ß retry 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (error?.response?.status === 401 && auth) {
        // return;
      try {
        const refreshed = await refreshTokenOnce()

        // ‡πÑ‡∏î‡πâ token ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß -> ‡πÉ‡∏™‡πà header ‡πÅ‡∏•‡πâ‡∏ß retry ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (refreshed?.access_token) {
          headers['Authorization'] = `Bearer ${refreshed.access_token}`
          const retryResp = await axios({ method, url, data, headers })
          isloadingAxi.value = false
          return retryResp
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ access_token ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ refresh ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ‡∏•‡πâ‡∏≤‡∏á token
        useClearEncryptedCookie('token')
      } catch (e) {
        // refresh fail -> ‡∏•‡πâ‡∏≤‡∏á token
        useClearEncryptedCookie('token')
      }
    }

    isloadingAxi.value = false
    console.error('request catch (error)', error)

    if (error.response?.status === 401) {
      console.warn('Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á | ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ | ‡πÑ‡∏°‡πà‡∏°‡∏µ Token')
      useClearEncryptedCookie('token') // üîê ‡∏•‡∏ö token ‡∏à‡∏≤‡∏Å cookie
      // await navigateTo("/auth/login");
    } else if (error.response?.status === 403) {
      // await navigateTo("/auth/login");
      // await navigateTo("/Unauthorized");
    } else if (error.response?.status === 422) {
      console.log('Validation Error')
    } else if (error.response?.status === 500) {
      console.error('Server Error', error.response)
    }

    throw error
  }
}
